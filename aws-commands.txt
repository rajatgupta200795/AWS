instance_id=$(wget -q -O- http://169.254.169.254/latest/meta-data/instance-id)
region=$(wget -q -O- http://169.254.169.254/latest/meta-data/placement/availability-zone | sed -e 's/\([1-9]\).$/\1/g')
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document  | jq '.region' | sed 's/^"\(.*\)"$/\1/' )


volume_list=$(aws ec2 describe-volumes --region $region --filters Name=attachment.instance-id,Values=$instance_id --query Volumes[].VolumeId --output text)

# Get the attched device name to add to the description so we can easily tell which volume this is.
device_name=$(aws ec2 describe-volumes --region $region --output=text --volume-ids $volume_id --query 'Volumes[0].{Devices:Attachments[0].Device}')

# Take a snapshot of the current volume, and capture the resulting snapshot ID
snapshot_description="$(hostname)-$device_name-backup-$(date +%Y-%m-%d)"

snapshot_date=$(aws ec2 describe-snapshots --region $region --output=text --snapshot-ids $snapshot --query Snapshots[].StartTime | awk -F "T" '{printf "%s\n", $1}')

snapshot_id=$(aws ec2 create-snapshot --region $region --output=text --description $snapshot_description --volume-id $volume_id --query SnapshotId)

snapshot_list=$(aws ec2 describe-snapshots --region $region --output=text --filters "Name=volume-id,Values=$volume_id" "Name=tag:CreatedBy,Values=AutomatedBackup" --query Snapshots[].SnapshotId)

***************** to get the created date of first snapshot id of first volume of partucular region of particular instance
echo $(aws ec2 describe-snapshots --region $region --output=text --snapshot-ids $(aws ec2 describe-snapshots --region $region --output=text --filters "Name=volume-id,Values=$((aws ec2 describe-volumes --region $region --filters Name=attachment.instance-id,Values=$instance_id --query Volumes[].VolumeId --output text) | awk -F " " '{printf "%s\n", $1}')" "Name=tag:CreatedBy,Values=AutomatedBackup" --query Snapshots[].SnapshotId)  --query Snapshots[].StartTime | awk -F "T" '{printf "%s\n", $1}')


*************** dont run this cmnd until sure aws ec2 delete-snapshot --region $region --snapshot-id $snapshot


scp -i k8snp.pem cookie.txt admin@ec2-3-1-26-239.ap-southeast-1.compute.amazonaws.com:~/. ;  eval $(ssh-agent) ; ssh-add -k k8snp.pem ; ssh -oStrictHostKeyChecking=no -Att -l admin 3.1.26.239 scp cookie.txt ec2-user@ip-10-0-95-194.ap-southeast-1.compute.internal:~/ ;  ssh -oStrictHostKeyChecking=no -Att -l admin 3.1.26.239 rm cookie.txt

scp -i rajatgupta qa-backup-for-stg-08-3-19.zip  rajatgupta@ec2-54-202-152-217.us-west-2.compute.amazonaws.com:~/. ;   ssh-add ~/.ssh/id_rsa ; ssh -oStrictHostKeyChecking=no -Att -l rajatgupta 54.202.152.217 scp qa-backup-for-stg-08-3-19.zip rajatgupta@ip-10-241-107-181.us-west-2.compute.internal:~/ ;  ssh -oStrictHostKeyChecking=no -Att -l rajatgupta 54.202.152.217 rm qa-backup-for-stg-08-3-19.zip


ssh-add ~/.ssh/id_rsa ; scp  rajatgupta@ec2-18-188-243-216.us-east-2.compute.amazonaws.com:index.html .

############## from a vpc to local

ssh-add ~/.ssh/id_rsa ; ssh -oStrictHostKeyChecking=no -Att -l rajatgupta 18.188.243.216 ssh -oStrictHostKeyChecking=no -Att -l rajatgupta 10.1.28.119 scp index.html rajatgupta ec2-18-188-243-216.us-east-2.compute.amazonaws.com:~/. ; scp  rajatgupta@ec2-18-188-243-216.us-east-2.compute.amazonaws.com:index.html . ; ssh -oStrictHostKeyChecking=no -Att -l rajatgupta 18.188.243.216 rm index.html

****************************************************************888 


Verifying Your Key Pair's Fingerprint
On the Key Pairs page in the Amazon EC2 console, the Fingerprint column displays the fingerprints generated from your key pairs. AWS calculates the fingerprint differently depending on whether the key pair was generated by AWS or a third-party tool. If you created the key pair using AWS, the fingerprint is calculated using an SHA-1 hash function. If you created the key pair with a third-party tool and uploaded the public key to AWS, or if you generated a new public key from an existing AWS-created private key and uploaded it to AWS, the fingerprint is calculated using an MD5 hash function.

If you created your key pair using AWS, you can use the OpenSSL tools to generate a fingerprint as follows:
openssl pkcs8 -in path_to_private_key -inform PEM -outform DER -topk8 -nocrypt | openssl sha1 -c
If you created a key pair using a third-party tool and uploaded the public key to AWS, you can use the OpenSSL tools to generate the fingerprint as follows:
openssl rsa -in path_to_private_key -pubout -outform DER | openssl md5 -c
If you created an OpenSSH key pair using OpenSSH 7.8 or later and uploaded the public key to AWS, you can use ssh-keygen to generate the fingerprint as follows:
ssh-keygen -ef path_to_private_key -m PEM | openssl rsa -RSAPublicKey_in -outform DER | openssl md5 -c

If you're using an Auto Scaling group (for example, in an Elastic Beanstalk environment), ensure that the key pair you're deleting is not specified in your launch configuration. Amazon EC2 Auto Scaling launches a replacement instance if it detects an unhealthy instance; however, the instance launch fails if the key pair cannot be found.

If you create a Linux AMI from an instance, and then use the AMI to launch a new instance in a different Region or account, the new instance includes the public key from the original instance. This enables you to connect to the new instance using the same private key file as your original instance. You can remove this public key from your instance by removing its entry from the .ssh/authorized_keys file using a text editor of your choice. 
